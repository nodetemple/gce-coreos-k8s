#cloud-config
write_files:
  - path: /etc/flannel/options.env
    permissions: 0644
    owner: root:root
    content: |
      FLANNELD_IFACE=$private_ipv4
      FLANNELD_ETCD_ENDPOINTS=http://127.0.0.1:2379
  - path: /etc/kubernetes/manifests/kube-apiserver.yaml
    permissions: 0644
    owner: root:root
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-apiserver
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-apiserver
          image: gcr.io/google_containers/hyperkube:v1.1.1
          command:
          - /hyperkube
          - apiserver
          - --secure-port=0
          - --advertise-address=$private_ipv4
          - --etcd-servers=http://127.0.0.1:2379
          - --service-cluster-ip-range=${SERVICE_IP_RANGE}
          - --allow-privileged=true
          ports:
          - containerPort: 8080
            hostPort: 8080
            name: local
  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    permissions: 0644
    owner: root:root
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: gcr.io/google_containers/hyperkube:v1.1.1
          command:
          - /hyperkube
          - proxy
          - --master=http://127.0.0.1:8080
          securityContext:
            privileged: true
  - path: /etc/kubernetes/manifests/kube-podmaster.yaml
    permissions: 0644
    owner: root:root
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-podmaster
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: scheduler-elector
          image: gcr.io/google_containers/podmaster:1.1.1
          command:
          - /podmaster
          - --etcd-servers=http://127.0.0.1:2379
          - --key=scheduler
          - --whoami=$private_ipv4
          - --source-file=/src/manifests/kube-scheduler.yaml
          - --dest-file=/dst/manifests/kube-scheduler.yaml
          volumeMounts:
          - mountPath: /src/manifests
            name: manifest-src
            readOnly: true
          - mountPath: /dst/manifests
            name: manifest-dst
        - name: controller-manager-elector
          image: gcr.io/google_containers/podmaster:1.1.1
          command:
          - /podmaster
          - --etcd-servers=http://127.0.0.1:2379
          - --key=controller
          - --whoami=$private_ipv4
          - --source-file=/src/manifests/kube-controller-manager.yaml
          - --dest-file=/dst/manifests/kube-controller-manager.yaml
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /src/manifests
            name: manifest-src
            readOnly: true
          - mountPath: /dst/manifests
            name: manifest-dst
        volumes:
        - hostPath:
            path: /srv/kubernetes/manifests
          name: manifest-src
        - hostPath:
            path: /etc/kubernetes/manifests
          name: manifest-dst
  - path: /srv/kubernetes/manifests/kube-controller-manager.yaml
    permissions: 0644
    owner: root:root
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-controller-manager
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-controller-manager
          image: gcr.io/google_containers/hyperkube:v1.1.1
          command:
          - /hyperkube
          - controller-manager
          - --master=http://127.0.0.1:8080
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10252
            initialDelaySeconds: 15
            timeoutSeconds: 1
  - path: /srv/kubernetes/manifests/kube-scheduler.yaml
    permissions: 0644
    owner: root:root
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-scheduler
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-scheduler
          image: gcr.io/google_containers/hyperkube:v1.1.1
          command:
          - /hyperkube
          - scheduler
          - --master=http://127.0.0.1:8080
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10251
            initialDelaySeconds: 15
            timeoutSeconds: 1
coreos:
  update:
    reboot-strategy: best-effort
    group: alpha
  etcd2:
    discovery: ${ETCD_DISCOVERY_TOKEN}
    initial-advertise-peer-urls: http://$private_ipv4:2380
    listen-peer-urls: http://$private_ipv4:2380
    listen-client-urls: http://$private_ipv4:2379,http://127.0.0.1:2379
    advertise-client-urls: http://$private_ipv4:2379
    heartbeat-interval: 500
    election-timeout: 5000
  units:
    - name: etcd2.service
      command: start
      drop-ins:
        - name: 50-cloud-init.conf
          content: |
            [Service]
            Restart=always
            RestartSec=5
            StartLimitInterval=0
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-cloud-init.conf
          content: |
            [Service]
            ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"${POD_NETWORK}","Backend":{"Type":"vxlan"}}'
            Restart=always
            RestartSec=5
            StartLimitInterval=0
    - name: docker.service
      command: start
      drop-ins:
        - name: 50-cloud-init.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
            [Service]
            Restart=always
            RestartSec=5
            StartLimitInterval=0
    - name: kubelet.service
      command: start
      content: |
        [Service]
        Environment=KUBELET_OPTS=
        ExecStart=/usr/bin/kubelet \
          --api-servers=http://127.0.0.1:8080 \
          --register-node=false \
          --allow-privileged=true \
          --config=/etc/kubernetes/manifests \
          --hostname-override=$private_ipv4 \
          --cluster-dns=${DNS_SERVICE_IP} \
          --cluster-domain=cluster.local \
          --cadvisor-port=0 \
          $KUBELET_OPTS
        Restart=always
        RestartSec=5
        StartLimitInterval=0
        [Install]
        WantedBy=multi-user.target
